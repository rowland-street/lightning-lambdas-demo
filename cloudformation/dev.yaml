Resources:
  lightninglambdasdemoeventbucketdevB92EB0CC:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: "lightning-lambdas-demo-eventbucket-dev"
    DeletionPolicy: "Delete"
  lightninglambdasdemoeventbucketdevNotificationsEC1305E5:
    Type: "Custom::S3BucketNotifications"
    Properties:
      ServiceToken:
        Fn::GetAtt:
        - "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691"
        - "Arn"
      BucketName:
        Ref: "lightninglambdasdemoeventbucketdevB92EB0CC"
      NotificationConfiguration:
        LambdaFunctionConfigurations:
        - Events:
          - "s3:ObjectCreated:*"
          LambdaFunctionArn:
            Fn::GetAtt:
            - "lightninglambdasdemolambdadev69F3A1CB"
            - "Arn"
    DependsOn:
    - "lightninglambdasdemolambdadevAllowBucketNotificationsFromlightninglambdasdemostackdevlightninglambdasdemoeventbucketdev37B2BC695A3C7D4F"
  lightninglambdasdemousersbucketdev531152C6:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: "lightning-lambdas-demo-usersbucket-dev"
    DeletionPolicy: "Delete"
  lightninglambdasdemouserstabledevC21EA304:
    Type: "AWS::DynamoDB::Table"
    Properties:
      KeySchema:
      - AttributeName: "id"
        KeyType: "HASH"
      AttributeDefinitions:
      - AttributeName: "id"
        AttributeType: "S"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TableName: "lightning-lambdas-demo-userstable-dev"
    DeletionPolicy: "Delete"
  lightninglambdasdemolambdadevServiceRoleE55DA6A3:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: "sts:AssumeRole"
          Effect: "Allow"
          Principal:
            Service:
              Fn::Join:
              - ""
              - - "lambda."
                - Ref: "AWS::URLSuffix"
        Version: "2012-10-17"
      ManagedPolicyArns:
      - Fn::Join:
        - ""
        - - "arn:"
          - Ref: "AWS::Partition"
          - ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
  lightninglambdasdemolambdadevServiceRoleDefaultPolicy44CE7972:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyDocument:
        Statement:
        - Action:
          - "s3:GetObject*"
          - "s3:GetBucket*"
          - "s3:List*"
          Effect: "Allow"
          Resource:
          - Fn::GetAtt:
            - "lightninglambdasdemoeventbucketdevB92EB0CC"
            - "Arn"
          - Fn::Join:
            - ""
            - - Fn::GetAtt:
                - "lightninglambdasdemoeventbucketdevB92EB0CC"
                - "Arn"
              - "/*"
        - Action:
          - "s3:PutObject*"
          - "s3:Abort*"
          Effect: "Allow"
          Resource:
            Fn::Join:
            - ""
            - - Fn::GetAtt:
                - "lightninglambdasdemoeventbucketdevB92EB0CC"
                - "Arn"
              - "/*"
        - Action:
          - "s3:GetObject*"
          - "s3:GetBucket*"
          - "s3:List*"
          Effect: "Allow"
          Resource:
          - Fn::GetAtt:
            - "lightninglambdasdemousersbucketdev531152C6"
            - "Arn"
          - Fn::Join:
            - ""
            - - Fn::GetAtt:
                - "lightninglambdasdemousersbucketdev531152C6"
                - "Arn"
              - "/*"
        - Action:
          - "s3:PutObject*"
          - "s3:Abort*"
          Effect: "Allow"
          Resource:
            Fn::Join:
            - ""
            - - Fn::GetAtt:
                - "lightninglambdasdemousersbucketdev531152C6"
                - "Arn"
              - "/*"
        - Action:
          - "dynamodb:BatchGetItem"
          - "dynamodb:GetRecords"
          - "dynamodb:GetShardIterator"
          - "dynamodb:Query"
          - "dynamodb:GetItem"
          - "dynamodb:Scan"
          Effect: "Allow"
          Resource:
          - Fn::GetAtt:
            - "lightninglambdasdemouserstabledevC21EA304"
            - "Arn"
          - Ref: "AWS::NoValue"
        Version: "2012-10-17"
      PolicyName: "lightninglambdasdemolambdadevServiceRoleDefaultPolicy44CE7972"
      Roles:
      - Ref: "lightninglambdasdemolambdadevServiceRoleE55DA6A3"
  lightninglambdasdemolambdadev69F3A1CB:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: "ll-demo-jar"
        S3Key: "demo/demo-1.0-SNAPSHOT.jar"
      Handler: "com.lightninglambdas.startup.S3Lambda::handleRequest"
      Role:
        Fn::GetAtt:
        - "lightninglambdasdemolambdadevServiceRoleE55DA6A3"
        - "Arn"
      Runtime: "java8"
      Description: "Main lambda for demo"
      Environment:
        Variables:
          dev_usersTable_tableName:
            Ref: "lightninglambdasdemouserstabledevC21EA304"
          Environment: "dev"
          dev_usersBucket_bucketName:
            Ref: "lightninglambdasdemousersbucketdev531152C6"
          dev_usersTable_idFieldName: "id"
          dev_usersTable_region: "eu-west-2"
      FunctionName: "lightning-lambdas-demo-lambda-dev"
      MemorySize: 256
      Timeout: 300
    DependsOn:
    - "lightninglambdasdemolambdadevServiceRoleDefaultPolicy44CE7972"
    - "lightninglambdasdemolambdadevServiceRoleE55DA6A3"
  ? lightninglambdasdemolambdadevAllowBucketNotificationsFromlightninglambdasdemostackdevlightninglambdasdemoeventbucketdev37B2BC695A3C7D4F
  : Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName:
        Fn::GetAtt:
        - "lightninglambdasdemolambdadev69F3A1CB"
        - "Arn"
      Principal: "s3.amazonaws.com"
      SourceAccount:
        Ref: "AWS::AccountId"
      SourceArn:
        Fn::GetAtt:
        - "lightninglambdasdemoeventbucketdevB92EB0CC"
        - "Arn"
  BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: "sts:AssumeRole"
          Effect: "Allow"
          Principal:
            Service:
              Fn::Join:
              - ""
              - - "lambda."
                - Ref: "AWS::URLSuffix"
        Version: "2012-10-17"
      ManagedPolicyArns:
      - Fn::Join:
        - ""
        - - "arn:"
          - Ref: "AWS::Partition"
          - ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
  BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyDocument:
        Statement:
        - Action: "s3:PutBucketNotification"
          Effect: "Allow"
          Resource: "*"
        Version: "2012-10-17"
      PolicyName: "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36"
      Roles:
      - Ref: "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
  BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691:
    Type: "AWS::Lambda::Function"
    Properties:
      Description: "AWS CloudFormation handler for \"Custom::S3BucketNotifications\"\
        \ resources (@aws-cdk/aws-s3)"
      Code:
        ZipFile: "exports.handler = (event, context) => {\n    const s3 = new (require('aws-sdk').S3)();\n\
          \    const https = require(\"https\");\n    const url = require(\"url\"\
          );\n    log(JSON.stringify(event, undefined, 2));\n    const props = event.ResourceProperties;\n\
          \    if (event.RequestType === 'Delete') {\n        props.NotificationConfiguration\
          \ = {}; // this is how you clean out notifications\n    }\n    const req\
          \ = {\n        Bucket: props.BucketName,\n        NotificationConfiguration:\
          \ props.NotificationConfiguration\n    };\n    return s3.putBucketNotificationConfiguration(req,\
          \ (err, data) => {\n        log({ err, data });\n        if (err) {\n  \
          \          return submitResponse(\"FAILED\", err.message + `\\nMore information\
          \ in CloudWatch Log Stream: ${context.logStreamName}`);\n        }\n   \
          \     else {\n            return submitResponse(\"SUCCESS\");\n        }\n\
          \    });\n    function log(obj) {\n        console.error(event.RequestId,\
          \ event.StackId, event.LogicalResourceId, obj);\n    }\n    // tslint:disable-next-line:max-line-length\n\
          \    // adapted from https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lambda-function-code.html#cfn-lambda-function-code-cfnresponsemodule\n\
          \    // to allow sending an error messge as a reason.\n    function submitResponse(responseStatus,\
          \ reason) {\n        const responseBody = JSON.stringify({\n           \
          \ Status: responseStatus,\n            Reason: reason || \"See the details\
          \ in CloudWatch Log Stream: \" + context.logStreamName,\n            PhysicalResourceId:\
          \ context.logStreamName,\n            StackId: event.StackId,\n        \
          \    RequestId: event.RequestId,\n            LogicalResourceId: event.LogicalResourceId,\n\
          \            NoEcho: false,\n        });\n        log({ responseBody });\n\
          \        const parsedUrl = url.parse(event.ResponseURL);\n        const\
          \ options = {\n            hostname: parsedUrl.hostname,\n            port:\
          \ 443,\n            path: parsedUrl.path,\n            method: \"PUT\",\n\
          \            headers: {\n                \"content-type\": \"\",\n     \
          \           \"content-length\": responseBody.length\n            }\n   \
          \     };\n        const request = https.request(options, (r) => {\n    \
          \        log({ statusCode: r.statusCode, statusMessage: r.statusMessage\
          \ });\n            context.done();\n        });\n        request.on(\"error\"\
          , (error) => {\n            log({ sendError: error });\n            context.done();\n\
          \        });\n        request.write(responseBody);\n        request.end();\n\
          \    }\n};"
      Handler: "index.handler"
      Role:
        Fn::GetAtt:
        - "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
        - "Arn"
      Runtime: "nodejs8.10"
      Timeout: 300
